<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>arp欺骗</title>
    <link href="/2023/12/17/arp%E6%AC%BA%E9%AA%97/"/>
    <url>/2023/12/17/arp%E6%AC%BA%E9%AA%97/</url>
    
    <content type="html"><![CDATA[<h1 id="ARP欺骗"><a href="#ARP欺骗" class="headerlink" title=".ARP欺骗"></a>.ARP欺骗</h1><p>首先了解ARP功能：</p><p>ARP存在于数据链路层，a节点传输数据给b节点ARP通过将传输b节点的ip转化为MAC地址再通过MAC地址将数据传输到b节点实现数据传输.</p><p>网络传输拓扑：</p><p><img src="/../images/image-20231217105156743.png" alt="image-20231217105156743"></p><p><strong>A主机向内网ip传输数据包:</strong></p><p>A主机如果要根B主机进行数据传输就一定要知道对方的MAC地址，如果没有MAC就会发送广播数据包给交换机，交换机发现是广播数据包后就会给局域网内的每一个设备发送这个数据包，B主机接收到数据包时就判断目的ip是否与自己一致，一致就接受并发送带有自己MAC地址的响应包给A主机，这样就实现了一个广播获取MAC地址的过程。</p><p><strong>A主机向外网ip传输数据包：</strong></p><p>外网ip首先用子网掩码进行比对如果不是局域网的ip就默认发给网关(数据包发到交换机，交换机发送是发给网关就会转发给网关)网关收到数据包后就利用别的协议查看将目的ip转换成目的ip的网关的MAC(这个是广义网的mac，字节数区分于以太网)..</p><p><strong>ARP欺骗原路:</strong></p><p>本次ARP欺骗实验是在内网环境实现实现向外网传输数据包,每一台主机ARP缓存中一开始是没有ip-MAC映射的，如果是跟内网主机进行过传输数据后就会有对方主机ip-MAC的映射，该映射是通过接收响应包然后更新自己的ARP缓存表来实现的，当然这是在设置为动态缓存的情况下才能实现更新。</p><p>一台主机接收响应包来更改自己的ARP缓存，如果没有做必要的安全措施。主机只要收到发给自己的响应包就会直接更新自己的ARP缓存。这个时候就会存在攻击者恶意制造响应包发给该主机，更改该主机的ARP缓存冒充为另一台主机，这里可以冒充为网关，这样当该主机访问外网的时候，就会通过ARP协议去解析网关的ip为攻击者的MAC地址，这样在数据传输中就会将数据传给攻击者的机子上。</p><p><strong>断网攻击</strong></p><p>断网攻击实质上就是通过向目标主机发送网关的响应包使得目标主机对网关的ARP缓存被覆盖，导致目标主机发现外网的数据包都发到了攻击者主机那，但是计算机在接收到目的ip不是自己的数据包后就会自动丢弃。导致目标主机的数据包不是发向网关实习上网的操作，这个就相当于断了目标主机的网。</p><p><strong>数据窃取</strong></p><p>断网攻击中说到数据包会被计算机自动丢弃，也就是不能实现接收和转发数据包的功能。此外，断网攻击只是暂时性的，因为目标主机在发现自己断网后就会直接联系管理员，这时候目标主机就很容易发现的ARP是被恶意篡改了。要实现数据窃取就要做到让目标主机能正常上网的而没有发现攻击者的主机，这里在windows下是可以将物理机模拟成一个交换机的，也就是把一切发到主机的数据包都接收并转发出去的功能，这样当目标主机发送数据包过来的时候，就可以将数据包接收并转发给真正网关就可以让目标主机实现正常的外网通信了。</p><p><strong>实验过程:</strong></p><p>先确保目标主机A和攻击机B在同一个局域网内,B主机查看本地默认网关和网关的真实MAC地址</p><p><img src="/../images/image-20231217134350409.png" alt="image-20231217134350409"></p><p><img src="/../images/image-20231217134507822.png" alt="image-20231217134507822"></p><p>这里一开始应该是动态的</p><p>这是时候通过扫描得知A主机的ip</p><p><img src="/../images/image-20231217134633779.png" alt="image-20231217134633779"></p><p>这时候利用<strong>虚拟机的kali在桥接模式下利用arpspoof构造伪造响应包</strong></p><p><em><strong>arpspoof [-i 接口] [-t 目标IP] [主机IP]</strong></em></p><p>接口就是网卡(这里使用kali本地的网卡)，目标ip就是要冒充的ip,主机的ip就是发送的对象</p><p>arpspoof一开始需要手动下载</p><p><img src="/../images/image-20231217134837988.png" alt="image-20231217134837988"></p><p>这个时候就不断向目标主机发送伪造响应包，一直发送的因为大部分计算机为了防止ARP被篡改会不断的询问该MAC地址是否正确，这里就是防止目标主机一直询问网关的MAC地址所以要一直发送数据包</p><p>这个时候A主机就自己可以查看到网关对应的MAC地址已经改成B主机的MAC地址的了，这时候目标服务器就已经是上不了网了，到此断网攻击就已经实现了.</p><p>如果要让A主机不察觉就要让数据包能正常发送到真正的网关处，这时候就要将B主机设置为一个可以接收和转发的交换机。</p><p><strong>win11设置数据包转发功能:</strong></p><p>cmd命令行中输入 <strong>Regedit</strong>打开注册表</p><p>找到该文件</p><p>HKEY_LOCAL_MACHINE” &gt; SYSTEM &gt; CurrentControlSet &gt;Services&gt; Tcpip &gt;Parameters &gt; IP Enable Router</p><p><img src="/../images/image-20231217140220094.png" alt="image-20231217140220094"></p><p>修改该值为1</p><p><img src="/../images/image-20231217140253316.png" alt="image-20231217140253316"></p><p>win+r打开Services.msc</p><p><img src="/../images/image-20231217140628776.png" alt="image-20231217140628776"></p><p>找到Routing and Remote Access service这个服务改成手动</p><p><img src="/../images/image-20231217140744349.png" alt="image-20231217140744349"></p><p>改为手动后点击启动，然后再重启电脑后就是一个可以用于接收和转发数据包的”交换机”了</p><p>这时候理论上就可以实现数据窃取了，但为什么叫理论上呢?这是因为可以发现，我们以实行欺骗数据包是从虚拟机里面发出来的，这是会经过本地机再转发给目标主机的。既然目标主机接收到数据包后会修改ARP缓存，那从虚拟机到本地机的伪造数据包也会被本地机所接收并修改，这样本地机的网关的ARP缓存也被修改成自己的MAC地址</p><p><img src="/../images/image-20231217142927766.png" alt="image-20231217142927766"></p><p><img src="/../images/image-20231217142950389.png" alt="image-20231217142950389"></p><p>这样就造成，A主机发送数据包给B主机后B主机发给网关的MAC地址是自己就又发给自己，就相当于数据包在B主机上原地打转，这个时候A和B主机是很卡的，或者说是几乎上不了网的.</p><p>**为什么说是很卡而不是完全上不了网呢?**这是说到前面说的，计算机会不断向网关询问MAC地址以防止ARP欺骗，在kali发送数据包中会存在发送的间隙，导致在这个间隙中计算机就询问到真正的网关的MAC地址了得到真正的通讯，所以是很卡.</p><p>可以通过绑定B主机的网关的MAC地址为静态来防止B主机也被欺骗。</p><p>因为B主机是win11版本,所以绑定MAC地址要先查看<strong>以太网的idx序号</strong></p><p>输入 netsh i i show in</p><p><img src="/../images/image-20231217143835667.png" alt="image-20231217143835667"></p><p>得知Idx为4就输入下列命令绑定指定网关ip的MAC地址</p><p>netsh -c “i i” add neighbors 4 “192.168.117.193” “b2-d6-22-d5-27-7a”</p><p><img src="/../images/image-20231217143946220.png" alt="image-20231217143946220"></p><p>这样就改为静态的就不会被响应包影响了。这个时候用A主机就可以正常访问外网了</p><p>B主机通过wireshark抓取A主机QQ的流量了</p><p><img src="/../images/image-20231217144304865.png" alt="image-20231217144304865"></p><p>这个时候就可以看到A主机登录的QQ账号实现数据窃取了</p><p><strong>安全防护</strong></p><p>可以向B主机一样设置为静态的MAC地址</p><p>可以在电脑上安装放ARP欺骗的软件</p><p>网关对数据的传输进行探查和比对</p>]]></content>
    
    
    
    <tags>
      
      <tag>.</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pikachu代码审计</title>
    <link href="/2023/12/04/pikachu%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    <url>/2023/12/04/pikachu%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h4 id="xss盲打"><a href="#xss盲打" class="headerlink" title=".xss盲打"></a>.xss盲打</h4><p>前台界面</p><p><img src="/../images/image-20231204181835440.png" alt="image-20231204181835440"></p><p>提示说有后台登录界面</p><p><img src="/../images/image-20231204181806892.png" alt="image-20231204181806892"></p><p>两者就模拟了用户给管理员发送反馈信息的功能</p><p>查看xss_blind.php</p><p><img src="/../images/image-20231204182031817.png" alt="image-20231204182031817"></p><p>这里发送反馈信息是存入数据库的,且是对语句进行了预处理防止sql注入</p><p>再看管理员界面的源码admin_login.php</p><p><img src="/../images/image-20231204182523159.png" alt="image-20231204182523159"></p><p>登录成功跳转到该文件</p><p><img src="/../images/image-20231204182730623.png" alt="image-20231204182730623"></p><p>代码首先是判断账户是否已经登录，然后就根据传入的id查看对应id发的内容，这里可能是因为内容不够多所有是全部显示的，总之这里就是读取了用户写入数据库的信息到下面</p><p><img src="/../images/image-20231204183541580.png" alt="image-20231204183541580"></p><p>这里显示html代码就构成了XSS漏洞</p><p>上传:</p><p>&lt;script&gt;alert(document.cookie)</script></p><p><img src="/../images/image-20231204184946184.png" alt="image-20231204184946184"></p><p>修复</p><p><img src="/../images/image-20231204185911857.png" alt="image-20231204185911857"></p><p>对上传的信息进行黑名单过滤等操作即可</p><p><img src="/../images/image-20231204190010860.png" alt="image-20231204190010860"></p><h4 id="XSS绕过"><a href="#XSS绕过" class="headerlink" title=".XSS绕过"></a>.XSS绕过</h4><p>本关主要是过滤了&lt;script&gt;没有别的黑名单</p><p><img src="/../images/image-20231204202939235.png" alt="image-20231204202939235"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$message</span>=<span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;message&#x27;</span>]);<br></code></pre></td></tr></table></figure><p>.*表示前后两个字符之间的任何字符，这里表达的意思就是匹配出&lt;&gt;内存在的script(无论嵌入什么字符，这个也可以有效防止双写绕过)</p><p>下面使用别的能执行javascript的函数的hmtl语句:</p><p>1.<strong>img标签</strong></p><ul><li>&lt;img src&#x3D;a onerror&#x3D;alert(1)&gt;&#x2F;&#x2F;图片加载错误时触发</li><li>&lt;img src&#x3D;a onclick&#x3D;alert(1)&gt;&#x2F;&#x2F;点击图片触发</li><li>&lt;img src&#x3D;1 onmouseover&#x3D;alert(1)&gt;&#x2F;&#x2F;鼠标在图片上触发</li><li>&lt;img src&#x3D;a onmouseout&#x3D;alert(1)&gt;&#x2F;&#x2F;鼠标从图片上移开触发</li></ul><p>2.<strong>a标签</strong>(重定向标签)</p><ul><li>&lt;a href&#x3D;javascript:alert()&gt;</a></li><li>&lt;a href&#x3D;”” onclick&#x3D;alert(1)&gt;</a></li></ul><p>3.input标签</p><ul><li>&lt;input onfocus&#x3D;”alert(‘xss’);”&gt;&#x2F;&#x2F;点到框就触发</li><li>&lt;input type&#x3D;”password” onkeydown&#x3D;alert(1)&gt;&#x2F;&#x2F;在框中一输入就触发</li></ul><p>4.button标签</p><ul><li>&lt;button onclick&#x3D;”alert(1)”&gt;enter</button></li></ul><h4 id="htmlspecialchars"><a href="#htmlspecialchars" class="headerlink" title=".htmlspecialchars()"></a>.<strong>htmlspecialchars()</strong></h4><p>htmlspecialchars()把预定义的字符转换为 HTML 实体</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-keyword">string</span>,flags,character-set,double_encode)<br></code></pre></td></tr></table></figure><p>预转义的字符：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta">&amp;：转换为&amp;amp;</span><br><span class="hljs-string">&quot;：转换为&amp;quot;</span><br>&#x27;：转换为成为 &#x27;<br>&lt;：转换为<span class="hljs-meta">&amp;lt;</span><br>&gt;：转换为<span class="hljs-meta">&amp;gt;</span><br></code></pre></td></tr></table></figure><ul><li>string：必需，规定要转换的字符串</li><li>flags ：可选，规定如何处理引号、无效的编码以及使用哪种文档类型</li><li>character-set ：可选，一个规定了要使用的字符集的字符串，如：UTF-8（默认）</li><li>double_encode ：可选，布尔值，规定了是否编码已存在的 HTML 实体。</li></ul><p>flags不设置时默认只转义双引号</p><p>对于flags:</p><ul><li>ENT_COMPAT ：默认仅编码双引号。</li><li>ENT_QUOTES：编码双引号和单引号。</li><li>ENT_NOQUOTES：不编码任何引号。</li></ul><p>看到本关的源码</p><p><img src="/../images/image-20231204213540865.png" alt="image-20231204213540865"></p><p>利用这个进行了预处理但是没有包含单引号导致，可以利用单引号闭合</p><p><img src="/../images/image-20231204213753569.png" alt="image-20231204213753569"></p><h4 id="xss之href输出"><a href="#xss之href输出" class="headerlink" title=".xss之href输出"></a>.xss之href输出</h4><p>普通输入查看源码</p><p><img src="/../images/image-20231204215049354.png" alt="image-20231204215049354"></p><p>直接插入在a标签的href中，根据前面的a标签触发语法可以知道可以利用javascript伪代码来执行alert</p><p>使用payload:</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">javascript</span>:<span class="hljs-function"><span class="hljs-title">alert</span>(<span class="hljs-number">1</span>)</span><br></code></pre></td></tr></table></figure><p><img src="/../images/image-20231204220525155.png" alt="image-20231204220525155"></p><p>成功执行js函数,再来看看源码</p><p><img src="/../images/image-20231204220735144.png" alt="image-20231204220735144"></p><p>可以看到依然是用htmlspecialchars()函数来转义，对比上一题只是多转义了单引号</p><p>但是我们刚刚直接使用javasrcipt伪代码不用闭合单引号照样执行js代码，可知<strong>在a标签中的href属性对空值是只是指双引号的时候，单引号形同虚设</strong>实验一下</p><p><img src="/../images/image-20231204221158696.png" alt="image-20231204221158696"></p><p><img src="/../images/image-20231204221240224.png" alt="image-20231204221240224"></p><p>换成双引号</p><p><img src="/../images/image-20231204221849883.png" alt="image-20231204221849883"></p><p><img src="/../images/image-20231204221901906.png" alt="image-20231204221901906"></p><h4 id="js输出"><a href="#js输出" class="headerlink" title=".js输出"></a>.js输出</h4><p>输入后没有输出，提示说输入tmac后输出图片看前端源码也看不出什么</p><p>直接看源码</p><p><img src="/../images/image-20231204224431786.png" alt="image-20231204224431786"></p><p>这里没有把可控变量放入html输出当中，往下看</p><p><img src="/../images/image-20231204224549307.png" alt="image-20231204224549307"></p><p>再看到这里发现是用了&lt;script&gt;标签来输出，&lt;script&gt;就是xss要的标签,而且从上面看到$ms是我们上输入的可控参数，受前一题启示，<strong>javascript里面是不会对tag和字符实体进行解释的,所以需要进行js转义</strong>，也就是说在&lt;script&gt;&lt;&#x2F;script&gt;内是可以闭合前面的&lt;script&gt;</p><p>使用在</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml">$ms=&#x27;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">echo</span> <span class="hljs-variable">$jsvar</span>;<span class="hljs-meta">?&gt;</span></span><span class="language-xml">&#x27;;</span><br></code></pre></td></tr></table></figure><p>这里就可以闭合前面的&lt;sciprt&gt;了,payload:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(1)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>/*<br></code></pre></td></tr></table></figure><p><img src="/../images/image-20231204225704547.png" alt="image-20231204225704547"></p><p>修复的话，这里主要是因为在<script>当中不会对html实体进行解释，如果执意要进行解释的话又会对功能的输出产生影响，最好的办法就是在将html实体放入js中之前先对实体进行字符处理或者敏感词过滤</p><p><img src="/../images/image-20231204230044832.png" alt="image-20231204230044832"></p><h4 id="RCE-ping"><a href="#RCE-ping" class="headerlink" title=".RCE.ping"></a>.RCE.ping</h4><p><img src="/../images/image-20231206163115734.png" alt="image-20231206163115734"></p><p>随便输入一个域名等了一会发现返回ping的数据包，猜测代码是执行了系统指令ping</p><p>查看代码</p><p><img src="/../images/image-20231206163249168.png" alt="image-20231206163249168"></p><p>发现果然如此,对于shell_exec函数是php用于执行系统命令的函数，该函数支持连续执行多条命令</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-symbol">$output</span> = shell_exec(<span class="hljs-string">&#x27;command1; command2&#x27;</span>);<br></code></pre></td></tr></table></figure><p>但对于一个command1下还可以通过&连接符来执行多条命令</p><p><img src="/../images/image-20231206163527350.png" alt="image-20231206163527350"></p><p>该漏洞源于没有对输入变量进行检查，这里可以通过严格要求输入的变量只能是数字和小数点(只能是IP)</p><p>通过截取小数点之间的字符进行检查，若不是数字则不执行系统命令</p><h4 id="RCE-eval"><a href="#RCE-eval" class="headerlink" title=".RCE.eval"></a>.RCE.eval</h4><p><img src="/../images/image-20231206181319449.png" alt="image-20231206181319449"></p><p>输入后报错，说函数eval使用错误</p><p>eval()是一个执行php代码的函数，一开始尝试system('ls');发现没有回显，后面才想起来，我这是windows搭建的环境不执行linux的命令...</p><p>使用system('dir');就可以了</p><p><img src="/../images/image-20231206181738218.png" alt="image-20231206181738218"></p><p>看看代码</p><p><img src="/../images/image-20231206182324985.png" alt="image-20231206182324985"></p><p>这里是直接将输入的值直接php代码执行，如果要防御则应该多一个执行系统函数的黑名单或者是限定执行的函数</p><h4 id="Unsafe-Filedownload"><a href="#Unsafe-Filedownload" class="headerlink" title=".Unsafe Filedownload"></a>.Unsafe Filedownload</h4><p>打开点击图片即可下载图片</p><p>查看html源代码</p><p><img src="/../images/image-20231206193208070.png" alt="image-20231206193208070"></p><p>可以看到,点击后直接进行跳转访问这个文件斌且讲一个文件名参数传入进去，这里就可以猜测到这一个是通过传入的一个文件名来进行文件下载了，如果代码没有对这个参数进行过滤则可以构成任意文件下载</p><p>尝试访问这个文件并传入一个文件名</p><p><img src="/../images/image-20231206193528716.png" alt="image-20231206193528716"></p><p>果然可以看一下文件代码</p><p><img src="/../images/image-20231206193945612.png" alt="image-20231206193945612"></p><p>只是判断了文件有无，没有判断文件是否合规的文件名，这就是造成漏洞的原因</p><p>修复则是在判断是否存在的基础上加上白名单</p><p><img src="/../images/image-20231206200112407.png" alt="image-20231206200112407"></p><p><img src="/../images/image-20231206200155208.png" alt="image-20231206200155208"></p><h4 id="垂直越权"><a href="#垂直越权" class="headerlink" title=".垂直越权"></a>.垂直越权</h4><p>首先用提示给的账号登录超级用户(实战是不能这样只能猜)和普通用户，对比两个用户的功能点，发现超级用户多了一个添加用户的功能，点进去发现跳转到另一个文件(在实战中如果在同一个目录下是有可能被扫出来的)猜测这个文件就是实现用户添加功能的，于是尝试用普通用户在登录的状态下去访问，一开始考虑到这个文件可能会有源跳转验证，于是多写入超级用户文件的跳转源。但是后面看了源码发现没有那么严格</p><p><img src="/../images/image-20231206223715105.png" alt="image-20231206223715105"></p><p>通过抓取普通用户登录状态下的包，改成POST传参方式，提交添加用户的信息参数发包，查看数据库</p><p><img src="/../images/image-20231206223839726.png" alt="image-20231206223839726"></p><p>发现添加成功，看源码<strong>op2_admin_edit.php</strong></p><p><img src="/../images/image-20231206223913025.png" alt="image-20231206223913025"></p><p>可见访问该文件实现功能前的验证只是验证了用户是否是登录，连用户等级和跳转来源都没验证这就造成了越权漏洞</p>]]></content>
    
    
    
    <tags>
      
      <tag>.</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>tcp流量报文分析</title>
    <link href="/2023/12/04/tcp%E6%B5%81%E9%87%8F%E6%8A%A5%E6%96%87%E5%88%86%E6%9E%90/"/>
    <url>/2023/12/04/tcp%E6%B5%81%E9%87%8F%E6%8A%A5%E6%96%87%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>.简单记录一下TCP流量报文</p><p><img src="/../images/image-20231204135152573.png" alt="image-20231204135152573"></p><p><img src="/../images/image-20231204135057382.png" alt="image-20231204135057382"></p><p><img src="/../images/image-20231204135819365.png" alt="image-20231204135819365">TCP三次握手过程</p><p>seq&#x3D;0表示等待对方一个响应，ack&#x3D;1表示一个响应</p><p><strong>1.首先发送端发出请求</strong></p><p><img src="/../images/image-20231204140820114.png" alt="image-20231204140820114"></p><p><strong>2.客户端受到请求后做出准备好接受的响应发给客户端(表示自己已经接受到)同时发一个请求包给客户端</strong></p><p><img src="/../images/image-20231204140948289.png" alt="image-20231204140948289"></p><p><strong>3.客户端接受到响应包后知道服务端已经同意，发送响应包告诉服务端表示我已经知道你准备好了</strong></p><p><img src="/../images/image-20231204141042767.png" alt="image-20231204141042767"></p><h4 id="数据的传输过程"><a href="#数据的传输过程" class="headerlink" title="数据的传输过程"></a>数据的传输过程</h4><p><img src="/../images/image-20231204142820637.png" alt="image-20231204142820637"></p><p><strong>1.第一次发送端发送数据和一个响应请求</strong></p><p><strong>2.接受端接收到后返回一个ACK长度为：seq+”数据长度”    响应包</strong></p><p><strong>3.发送端接受到响应并验证和后便以接收到的响应包的长度为seq的长度同下一个要发的数据发给接收端</strong></p><h4 id="4次挥手过程"><a href="#4次挥手过程" class="headerlink" title="4次挥手过程"></a>4次挥手过程</h4><p><img src="/../images/image-20231204142755068.png" alt="image-20231204142755068"></p><p><strong>1.客户端发送FIN请求包给服务端。进入结束状态1</strong></p><p><strong>2.服务端接收到后发一个响应包同时又发一个FIN包(包含服务端将剩下的数据发给客户端)[这里发了两个包]进入结束状态1</strong></p><p><strong>3.客户端接收到响应包后发送一个响应包给服务端，进入结束状态2(一段时间过后没有受到响应直接结束交互)</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>.</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DedeCMS-V5.7复现</title>
    <link href="/2023/12/03/DedeCMS-V5-7%E5%A4%8D%E7%8E%B0/"/>
    <url>/2023/12/03/DedeCMS-V5-7%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p>.测试环境:本地phpstudy2018搭建</p><p>下载DedeCMS-V5.7源码将文件访问根目录中访问搭建</p><p>搭建后访问<strong>127.0.0.1&#x2F;DedeCMS-V5.7-GBK-SP2-Full&#x2F;uploads&#x2F;member&#x2F;login.php</strong></p><p><img src="/../images/image-20231203185737331.png" alt="image-20231203185737331"></p><h4 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title=".漏洞分析"></a>.漏洞分析</h4><p>该漏洞产生于**&#x2F;uploads&#x2F;member&#x2F;resetpassword.php**中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable">$dopost</span> == <span class="hljs-string">&quot;safequestion&quot;</span>)<br>&#123;<br>    <span class="hljs-variable">$mid</span> = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&quot;#[^0-9]#&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);<br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;SELECT safequestion,safeanswer,userid,email FROM #@__member WHERE mid = &#x27;<span class="hljs-subst">$mid</span>&#x27;&quot;</span>;<br>    <span class="hljs-variable">$row</span> = <span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">GetOne</span>(<span class="hljs-variable">$sql</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$safequestion</span>)) <span class="hljs-variable">$safequestion</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$safeanswer</span>)) <span class="hljs-variable">$safeanswer</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;safequestion&#x27;</span>] == <span class="hljs-variable">$safequestion</span> &amp;&amp; <span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;safeanswer&#x27;</span>] == <span class="hljs-variable">$safeanswer</span>)<br>    &#123;<br>        <span class="hljs-title function_ invoke__">sn</span>(<span class="hljs-variable">$mid</span>, <span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;userid&#x27;</span>], <span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;email&#x27;</span>], <span class="hljs-string">&#x27;N&#x27;</span>);<br>        <span class="hljs-keyword">exit</span>();<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-title function_ invoke__">ShowMsg</span>(<span class="hljs-string">&quot;对不起，您的安全问题或答案回答错误&quot;</span>,<span class="hljs-string">&quot;-1&quot;</span>);<br>        <span class="hljs-keyword">exit</span>();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>该.php是一个实现密码找回的功能，从界面中可以看出密码找回是可以通过两个方式找回密码的，一个是邮件找回另一个是通过回答安全问题找回</p><p><img src="/../images/image-20231203154456370.png" alt="image-20231203154456370"></p><p>但从源码中看出，当应用回答安全问题来实现找回密码的时候如果用户没有设置安全问题，在这个函数中对该账户查找对应的安全问题为空则会返回”0”自然回答问题的答案也不会在数据库中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable">$dopost</span> == <span class="hljs-string">&quot;safequestion&quot;</span>)<span class="hljs-comment">//回答安全问题来实现修改密码</span><br>&#123;<br>    <span class="hljs-variable">$mid</span> = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&quot;#[^0-9]#&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);<span class="hljs-comment">//处理输入的ID一定为数字</span><br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;SELECT safequestion,safeanswer,userid,email FROM #@__member WHERE mid = &#x27;<span class="hljs-subst">$mid</span>&#x27;&quot;</span>;<span class="hljs-comment">//sql查询语句</span><br>    <span class="hljs-variable">$row</span> = <span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">GetOne</span>(<span class="hljs-variable">$sql</span>);<span class="hljs-comment">//返回的查询对象$row</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$safequestion</span>)) <span class="hljs-variable">$safequestion</span> = <span class="hljs-string">&#x27;&#x27;</span>;<span class="hljs-comment">//判断问题是否为空</span><br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$safeanswer</span>)) <span class="hljs-variable">$safeanswer</span> = <span class="hljs-string">&#x27;&#x27;</span>;<span class="hljs-comment">//判断问题是否为空</span><br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;safequestion&#x27;</span>] == <span class="hljs-variable">$safequestion</span> &amp;&amp; <span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;safeanswer&#x27;</span>] == <span class="hljs-variable">$safeanswer</span>)<br>    &#123;<span class="hljs-comment">//判断安全问题和问题答案是否一致</span><br>        <span class="hljs-title function_ invoke__">sn</span>(<span class="hljs-variable">$mid</span>, <span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;userid&#x27;</span>], <span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;email&#x27;</span>], <span class="hljs-string">&#x27;N&#x27;</span>);<span class="hljs-comment">//一直直接进入sn函数</span><br>        <span class="hljs-keyword">exit</span>();<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-title function_ invoke__">ShowMsg</span>(<span class="hljs-string">&quot;对不起，您的安全问题或答案回答错误&quot;</span>,<span class="hljs-string">&quot;-1&quot;</span>);<br>        <span class="hljs-keyword">exit</span>();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>其中的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;safequestion&#x27;</span>] == <span class="hljs-variable">$safequestion</span> &amp;&amp; <span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;safeanswer&#x27;</span>] == <span class="hljs-variable">$safeanswer</span>)<br></code></pre></td></tr></table></figure><p>这里的判断相等只用了”&#x3D;&#x3D;”弱比较不考虑参数的类型只考虑参数的数值，因为要修改的用户id对应的safequestion是为”0”的，所有输入的参数只需与其相等即可，但是如果直接输入safequestion&#x3D;0在</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$safequestion</span>)) <span class="hljs-variable">$safequestion</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br></code></pre></td></tr></table></figure><p>就会将safequestion&#x3D;””导致后面的判断呈现””&#x3D;&#x3D;”0”的结果，这当然是不符合的但是可以利用弱比较的特性传入一个”0.0”</p><p><img src="/../images/image-20231203182212611.png" alt="image-20231203182212611"></p><p>这样既能绕过empty()判空又能绕过if语句进入sn()了</p><p>通过上述分析后继续追查分析sn函数</p><p>打开**&#x2F;uploads&#x2F;member&#x2F;inc&#x2F;inc_pwd_functions.php**</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sn</span>(<span class="hljs-params"><span class="hljs-variable">$mid</span>,<span class="hljs-variable">$userid</span>,<span class="hljs-variable">$mailto</span>, <span class="hljs-variable">$send</span> = <span class="hljs-string">&#x27;Y&#x27;</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$db</span>;<br>    <span class="hljs-variable">$tptim</span>= (<span class="hljs-number">60</span>*<span class="hljs-number">10</span>);<br>    <span class="hljs-variable">$dtime</span> = <span class="hljs-title function_ invoke__">time</span>();<br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;SELECT * FROM #@__pwd_tmp WHERE mid = &#x27;<span class="hljs-subst">$mid</span>&#x27;&quot;</span>;<span class="hljs-comment">//查询#@__pwd_tmp字段的所有值</span><br>    <span class="hljs-variable">$row</span> = <span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">GetOne</span>(<span class="hljs-variable">$sql</span>);<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$row</span>))<br>    &#123;<br>        <span class="hljs-comment">//发送新邮件；</span><br>        <span class="hljs-title function_ invoke__">newmail</span>(<span class="hljs-variable">$mid</span>,<span class="hljs-variable">$userid</span>,<span class="hljs-variable">$mailto</span>,<span class="hljs-string">&#x27;INSERT&#x27;</span>,<span class="hljs-variable">$send</span>);<br>    &#125;<br>    <span class="hljs-comment">//10分钟后可以再次发送新验证码；</span><br>    <span class="hljs-keyword">elseif</span>(<span class="hljs-variable">$dtime</span> - <span class="hljs-variable">$tptim</span> &gt; <span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;mailtime&#x27;</span>])<br>    &#123;<br>        <span class="hljs-title function_ invoke__">newmail</span>(<span class="hljs-variable">$mid</span>,<span class="hljs-variable">$userid</span>,<span class="hljs-variable">$mailto</span>,<span class="hljs-string">&#x27;UPDATE&#x27;</span>,<span class="hljs-variable">$send</span>);<br>    &#125;<br>    <span class="hljs-comment">//重新发送新的验证码确认邮件；</span><br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">ShowMsg</span>(<span class="hljs-string">&#x27;对不起，请10分钟后再重新申请&#x27;</span>, <span class="hljs-string">&#x27;login.php&#x27;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到这**newmail($mid,$userid,$mailto,’UPDATE’,$send);**看到newmail函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">newmail</span>(<span class="hljs-params"><span class="hljs-variable">$mid</span>, <span class="hljs-variable">$userid</span>, <span class="hljs-variable">$mailto</span>, <span class="hljs-variable">$type</span>, <span class="hljs-variable">$send</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$db</span>,<span class="hljs-variable">$cfg_adminemail</span>,<span class="hljs-variable">$cfg_webname</span>,<span class="hljs-variable">$cfg_basehost</span>,<span class="hljs-variable">$cfg_memberurl</span>;<br>    <span class="hljs-variable">$mailtime</span> = <span class="hljs-title function_ invoke__">time</span>();<br>    <span class="hljs-variable">$randval</span> = <span class="hljs-title function_ invoke__">random</span>(<span class="hljs-number">8</span>);<span class="hljs-comment">//生成八位随机数</span><br>    <span class="hljs-variable">$mailtitle</span> = <span class="hljs-variable">$cfg_webname</span>.<span class="hljs-string">&quot;:密码修改&quot;</span>;<br>    <span class="hljs-variable">$mailto</span> = <span class="hljs-variable">$mailto</span>;<br>    <span class="hljs-variable">$headers</span> = <span class="hljs-string">&quot;From: &quot;</span>.<span class="hljs-variable">$cfg_adminemail</span>.<span class="hljs-string">&quot;\r\nReply-To: <span class="hljs-subst">$cfg_adminemail</span>&quot;</span>;<br>    <span class="hljs-variable">$mailbody</span> = <span class="hljs-string">&quot;亲爱的&quot;</span>.<span class="hljs-variable">$userid</span>.<span class="hljs-string">&quot;：\r\n您好！感谢您使用&quot;</span>.<span class="hljs-variable">$cfg_webname</span>.<span class="hljs-string">&quot;网。\r\n&quot;</span>.<span class="hljs-variable">$cfg_webname</span>.<span class="hljs-string">&quot;应您的要求，重新设置密码：（注：如果您没有提出申请，请检查您的信息是否泄漏。）\r\n本次临时登陆密码为：&quot;</span>.<span class="hljs-variable">$randval</span>.<span class="hljs-string">&quot; 请于三天内登陆下面网址确认修改。\r\n&quot;</span>.<span class="hljs-variable">$cfg_basehost</span>.<span class="hljs-variable">$cfg_memberurl</span>.<span class="hljs-string">&quot;/resetpassword.php?dopost=getpasswd&amp;id=&quot;</span>.<span class="hljs-variable">$mid</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$type</span> == <span class="hljs-string">&#x27;INSERT&#x27;</span>)<br>    ......<span class="hljs-comment">//省略</span><br>    <span class="hljs-keyword">elseif</span>(<span class="hljs-variable">$type</span> == <span class="hljs-string">&#x27;UPDATE&#x27;</span>)<span class="hljs-comment">//调用的时候传入的type参数为&quot;UPDATE&quot;</span><br>    &#123;<br>        <span class="hljs-variable">$key</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$randval</span>);<span class="hljs-comment">//生成md5值</span><br>        <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;UPDATE `#@__pwd_tmp` SET `pwd` = &#x27;<span class="hljs-subst">$key</span>&#x27;,mailtime = &#x27;<span class="hljs-subst">$mailtime</span>&#x27;  WHERE `mid` =&#x27;<span class="hljs-subst">$mid</span>&#x27;;&quot;</span>;<span class="hljs-comment">//查询指定mid下的密码和临时密码</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">ExecuteNoneQuery</span>(<span class="hljs-variable">$sql</span>))<br>        &#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$send</span> == <span class="hljs-string">&#x27;Y&#x27;</span>)<br>            &#123;<br>                <span class="hljs-title function_ invoke__">sendmail</span>(<span class="hljs-variable">$mailto</span>,<span class="hljs-variable">$mailtitle</span>,<span class="hljs-variable">$mailbody</span>,<span class="hljs-variable">$headers</span>);<br>                <span class="hljs-title function_ invoke__">ShowMsg</span>(<span class="hljs-string">&#x27;EMAIL修改验证码已经发送到原来的邮箱请查收&#x27;</span>, <span class="hljs-string">&#x27;login.php&#x27;</span>);<br>            &#125;<br>            <span class="hljs-keyword">elseif</span>(<span class="hljs-variable">$send</span> == <span class="hljs-string">&#x27;N&#x27;</span>)<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">ShowMsg</span>(<span class="hljs-string">&#x27;稍后跳转到修改页&#x27;</span>, <span class="hljs-variable">$cfg_basehost</span>.<span class="hljs-variable">$cfg_memberurl</span>.<span class="hljs-string">&quot;/resetpassword.php?dopost=getpasswd&amp;amp;id=&quot;</span>.<span class="hljs-variable">$mid</span>.<span class="hljs-string">&quot;&amp;amp;key=&quot;</span>.<span class="hljs-variable">$randval</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-title function_ invoke__">ShowMsg</span>(<span class="hljs-string">&#x27;对不起修改失败，请与管理员联系&#x27;</span>, <span class="hljs-string">&#x27;login.php&#x27;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里在sn传入的参数中send是”Y”但是这里是要在”N”时才能涉及关键(疑惑..)</p><p>看到send为”N”的时候，直接跳转回了resetpassword.php中且dopost&#x3D;getpasswd去到该情况下跟主要的是返回了$key</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable">$dopost</span> == <span class="hljs-string">&quot;getpasswd&quot;</span>)<br>&#123;<br>    <span class="hljs-comment">//修改密码</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$id</span>))<br>    &#123;<br>        <span class="hljs-title function_ invoke__">ShowMsg</span>(<span class="hljs-string">&quot;对不起，请不要非法提交&quot;</span>,<span class="hljs-string">&quot;login.php&quot;</span>);<br>        <span class="hljs-keyword">exit</span>();<br>    &#125;<br>    <span class="hljs-variable">$mid</span> = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&quot;#[^0-9]#&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$id</span>);<br>    <span class="hljs-variable">$row</span> = <span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">GetOne</span>(<span class="hljs-string">&quot;SELECT * FROM #@__pwd_tmp WHERE mid = &#x27;<span class="hljs-subst">$mid</span>&#x27;&quot;</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$row</span>))<br>    &#123;<br>        <span class="hljs-title function_ invoke__">ShowMsg</span>(<span class="hljs-string">&quot;对不起，请不要非法提交&quot;</span>,<span class="hljs-string">&quot;login.php&quot;</span>);<br>        <span class="hljs-keyword">exit</span>();<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$setp</span>))<br>    &#123;<br>        <span class="hljs-variable">$tptim</span>= (<span class="hljs-number">60</span>*<span class="hljs-number">60</span>*<span class="hljs-number">24</span>*<span class="hljs-number">3</span>);<br>        <span class="hljs-variable">$dtime</span> = <span class="hljs-title function_ invoke__">time</span>();<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$dtime</span> - <span class="hljs-variable">$tptim</span> &gt; <span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;mailtime&#x27;</span>])<br>        &#123;<br>            <span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">executenonequery</span>(<span class="hljs-string">&quot;DELETE FROM `#@__pwd_tmp` WHERE `md` = &#x27;<span class="hljs-subst">$id</span>&#x27;;&quot;</span>);<br>            <span class="hljs-title function_ invoke__">ShowMsg</span>(<span class="hljs-string">&quot;对不起，临时密码修改期限已过期&quot;</span>,<span class="hljs-string">&quot;login.php&quot;</span>);<br>            <span class="hljs-keyword">exit</span>();<br>        &#125;<br>        <span class="hljs-keyword">require_once</span>(<span class="hljs-title function_ invoke__">dirname</span>(<span class="hljs-keyword">__FILE__</span>).<span class="hljs-string">&quot;/templets/resetpassword2.htm&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">elseif</span>(<span class="hljs-variable">$setp</span> == <span class="hljs-number">2</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$key</span>)) <span class="hljs-variable">$pwdtmp</span> = <span class="hljs-variable">$key</span>;<br><br>        <span class="hljs-variable">$sn</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$pwdtmp</span>));<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;pwd&#x27;</span>] == <span class="hljs-variable">$sn</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$pwd</span> != <span class="hljs-string">&quot;&quot;</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-variable">$pwd</span> == <span class="hljs-variable">$pwdok</span>)<br>                &#123;<br>                    <span class="hljs-variable">$pwdok</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$pwdok</span>);<br>                    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;DELETE FROM `#@__pwd_tmp` WHERE `mid` = &#x27;<span class="hljs-subst">$id</span>&#x27;;&quot;</span>;<br>                    <span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">executenonequery</span>(<span class="hljs-variable">$sql</span>);<br>                    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;UPDATE `#@__member` SET `pwd` = &#x27;<span class="hljs-subst">$pwdok</span>&#x27; WHERE `mid` = &#x27;<span class="hljs-subst">$id</span>&#x27;;&quot;</span>;<br>                    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">executenonequery</span>(<span class="hljs-variable">$sql</span>))<br>                    &#123;<br>                        <span class="hljs-title function_ invoke__">showmsg</span>(<span class="hljs-string">&#x27;更改密码成功，请牢记新密码&#x27;</span>, <span class="hljs-string">&#x27;login.php&#x27;</span>);<br>                        <span class="hljs-keyword">exit</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-title function_ invoke__">showmsg</span>(<span class="hljs-string">&#x27;对不起，新密码为空或填写不一致&#x27;</span>, <span class="hljs-string">&#x27;-1&#x27;</span>);<br>            <span class="hljs-keyword">exit</span>;<br>        &#125;<br>        <span class="hljs-title function_ invoke__">showmsg</span>(<span class="hljs-string">&#x27;对不起，临时密码错误&#x27;</span>, <span class="hljs-string">&#x27;-1&#x27;</span>);<br>        <span class="hljs-keyword">exit</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>到这里就是在设置密码的模块的了，在这里先加载模板界面让用户填入新的密码，在判断临时密码是否存在，若存在就对比key和数据库中查的pwdok是否一致，有然后再确认两次输入的密码是否一致后便可修改密码成功。</p><h4 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title=".漏洞复现"></a>.漏洞复现</h4><p>访问<strong>127.0.0.1&#x2F;DedeCMS-V5.7-GBK-SP2-Full&#x2F;uploads&#x2F;member&#x2F;</strong></p><p>点击注册</p><p><img src="/../images/image-20231203181338427.png" alt="image-20231203181338427"></p><p>创建账户后用admin账号查看刚创建账户的id(真正实战的情况下是要靠直接去获取)</p><p><img src="/../images/image-20231203181610700.png" alt="image-20231203181610700"></p><p>id为8</p><p>通过上述的分析我们可以对URL：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">127.0.0.1/DedeCMS-V5.7-GBK-SP2-Full/uploads/member/resetpassword.php<br></code></pre></td></tr></table></figure><p>传入post数据</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">dopost</span>=safequestion&amp;safequestion=<span class="hljs-number">0</span>.<span class="hljs-number">0</span>&amp;safeanswer=&amp;id=<span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><p><img src="/../images/image-20231203183733967.png" alt="image-20231203183733967"></p><p>得到key后访问传入参数访问getpasswd模块，这里传入key(注意不能发包)</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">127.0.0.1</span>/DedeCMS-V5.<span class="hljs-number">7</span>-GBK-SP2-Full/uploads/member/resetpassword.php?dopost=getpasswd&amp;key=<span class="hljs-number">3</span>NeuKnOt<br></code></pre></td></tr></table></figure><p><img src="/../images/image-20231203184110318.png" alt="image-20231203184110318"></p><h4 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title=".漏洞修复"></a>.漏洞修复</h4><p>本漏洞产生源于对传入的参数没有做严格的判断，这里使用强比较”&#x3D;&#x3D;&#x3D;”</p><p><img src="/../images/image-20231203184356949.png" alt="image-20231203184356949"></p>]]></content>
    
    
    
    <tags>
      
      <tag>DedeCMS-V5.7复现</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网络渗透作业(2)</title>
    <link href="/2023/11/14/%E7%BD%91%E7%BB%9C%E6%B8%97%E9%80%8F(2)/"/>
    <url>/2023/11/14/%E7%BD%91%E7%BB%9C%E6%B8%97%E9%80%8F(2)/</url>
    
    <content type="html"><![CDATA[<h4 id="1-连接校园网"><a href="#1-连接校园网" class="headerlink" title="(1)连接校园网"></a>(1)连接校园网</h4><p> 物理机查看校园网分配的ip </p><p><img src="/../images/f.png" alt="f"></p><p>首先将虚拟机设置为桥接模式</p><p><img src="/../images/a.png" alt="a"></p><p>在连接校园网的情况下，虚拟机桥接模式相当于把虚拟机和物理机都单独成一个机子共同连接校园网，虚拟机不再把我理解当成路由而是直连校园网。</p><p><img src="/../images/e.png" alt="e"></p><p><strong>提示:如果在设置桥接模式后查看ip情况后发现还是物理机分配的虚拟机本地ip，这时候可以查看一下虚拟网络编辑器看看是否在桥接模式</strong></p><p><img src="/../images/b.png"></p><p>若发现不是，改成桥接并重启后就可以正常实验了。</p><p>回到正题，<strong>通过物理机连接校园网后虚拟机查看不了ip</strong></p><h4 id="2-连接个人热点"><a href="#2-连接个人热点" class="headerlink" title="(2)连接个人热点"></a><strong>(2)连接个人热点</strong></h4><p> 先用物理机查看连接个人热点后的ip地址</p><p><img src="/../images/c.png"></p><p>在用虚拟机查看</p><p><img src="/../images/d.png" alt="d"></p><p>发现是可以查看得到ip的</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p> 对比校园网和个人热点对ip的处理</p><p>在连接校园的情况下虚拟机获取不了ip是因为<strong>MAC 地址过滤</strong>：校园网可能对连接设备(虚拟机)的 MAC 地址进行了过滤，而 Kali Linux 的 MAC 地址不在被允许列表中，因此无法获得 IP 地址。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Kali虚拟机采用桥接模式；物理机连接Guet-WiFi，Kali中查看网络配置并截图，能获得IP地址吗？</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网络渗透作业(3)</title>
    <link href="/2023/11/14/%E7%BD%91%E7%BB%9C%E6%B8%97%E9%80%8F(3)/"/>
    <url>/2023/11/14/%E7%BD%91%E7%BB%9C%E6%B8%97%E9%80%8F(3)/</url>
    
    <content type="html"><![CDATA[<h5 id="与Zoomeye相关的搜索引擎还有"><a href="#与Zoomeye相关的搜索引擎还有" class="headerlink" title="与Zoomeye相关的搜索引擎还有"></a>与Zoomeye相关的搜索引擎还有</h5><ol><li><strong>Shodan</strong>:一个知名的搜索引擎，它可以帮助用户查找全球范围内连接到互联网的设备，包括服务器、路由器、摄像头等，并提供有关这些设备的信息。</li><li><strong>Censys</strong>:一个网络安全搜索引擎,帮助用户发现互联网上的设备并获取相关信息。</li><li><strong>BinaryEdge</strong>：帮助用户搜索和分析互联网上的设备和资产信息。</li></ol><p><strong>这些搜索引擎都可以帮助安全研究人员、网络管理员和企业了解其在互联网上的曝露情况，有助于及时发现潜在的安全风险并加强网络安全防护。</strong></p><h5 id="下面是利用fofa来进行一些关于学校的信息搜集"><a href="#下面是利用fofa来进行一些关于学校的信息搜集" class="headerlink" title="下面是利用fofa来进行一些关于学校的信息搜集"></a><strong>下面是利用fofa来进行一些关于学校的信息搜集</strong></h5><p><img src="/../images/image-20231114204456057.png"></p><p>从图可以看出是在搜索url中有关键词’guet’且国家在’CN’的域名.</p><p>通过了解一些简单的搜索语法可以方便我们检索到许多测试目标有用的信息</p><h5 id="子域名收集"><a href="#子域名收集" class="headerlink" title="子域名收集"></a>子域名收集</h5><p>可以使用在线网站</p><p><img src="/../images/image-20231114205050758.png"></p><p>也可以使用工具</p><p><img src="/../images/image-20231114205327016.png"></p><p>可以利用不同的工具可以搜到不同的子域名，搜集的子域名越多对我们后期的测试越有利</p>]]></content>
    
    
    
    <tags>
      
      <tag>与ZoomEye功能类似的搜索引擎还有哪些?</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>QQ流量抓取</title>
    <link href="/2023/11/14/QQ%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"/>
    <url>/2023/11/14/QQ%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h4 id="流量抓取"><a href="#流量抓取" class="headerlink" title="流量抓取"></a>流量抓取</h4><p>准备好一张jpg图片</p><p><img src="/../images/send.jpg" alt="send"></p><p>打开wireshark找到wifi下的WLAN</p><p><img src="/../images/image-20231120161648168.png" alt="image-20231120161648168"></p><p>打开WLAN后，使用筛选器筛选TCP协议的流量</p><p><img src="/../images/image-20231120161849652.png" alt="image-20231120161849652"></p><p>然后向QQ好友发送上述图片后筛选出发送图片的流量包</p><p>ctrl+f勾选16进制查找，这里是通过文件头标识来找到目标流量包(jpg的文件头为<strong>ffd8ffe0</strong>)</p><p><img src="/../images/image-20231120162504687.png" alt="image-20231120162504687"></p><p>找到后对该包右键——&gt;跟踪流——&gt;TCP</p><p><img src="/../images/image-20231120162631862.png" alt="image-20231120162631862"></p><p>然后勾选本地ip为源ip发送给目的ip的数据，将数据显示为<strong>原始数据</strong></p><p><img src="/../images/image-20231120162834684.png" alt="image-20231120162834684"></p><p>另存为一张jpg图片后发现是打不开的，这是因为数据中还参杂着一些别的数据</p><p>通过010Editor对该图片进行修改</p><p><img src="/../images/image-20231120163134483.png" alt="image-20231120163134483"></p><p>删除文件头前面的数据保存即可打开该图片</p><p><img src="/../images/image-20231120163237804.png" alt="image-20231120163237804"></p><h4 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h4><h5 id="QQ好友将图片发到PC端"><a href="#QQ好友将图片发到PC端" class="headerlink" title="QQ好友将图片发到PC端"></a><strong>QQ好友将图片发到PC端</strong></h5><p>尝试抓取流量</p><p><img src="/../images/image-20231120163850365.png" alt="image-20231120163850365"></p><p>发现是抓取不到的</p><h5 id="使用手机端QQ向PC端QQ（同属一个QQ）中"><a href="#使用手机端QQ向PC端QQ（同属一个QQ）中" class="headerlink" title="使用手机端QQ向PC端QQ（同属一个QQ）中"></a><strong>使用手机端QQ向PC端QQ（同属一个QQ）中</strong></h5><p>发送后查看TCP协议的流量</p><p><img src="/../images/image-20231120164117741.png" alt="image-20231120164117741"></p><p>发现抓取到了</p><h5 id="将图片发到群聊中"><a href="#将图片发到群聊中" class="headerlink" title="将图片发到群聊中"></a><strong>将图片发到群聊中</strong></h5><p>尝试抓取流量包</p><p><img src="/../images/image-20231120163522022.png" alt="image-20231120163522022"></p><p>发现是抓取不到的</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>由此可见QQ对图片的传输在设备向外传输和手机端向PC端传输时的tcp是不对图片进行加密的，但在向群中发送图片时对图片进行了加密处理，QQ对图片传输是有一定的保护性的</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
